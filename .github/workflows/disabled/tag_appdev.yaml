name: Tag Appdev Environment

on:
  pull_request:
    types: [ labeled ]

jobs:

  tag_appdev:
    runs-on: ubuntu-latest
    steps:

    - name: Check out GitHub Repo
      uses: actions/checkout@v2


    - name: Set App Version and Repo Name
      run: |
        echo ::set-env name=APP_VERSION_NUM::$(sed -n '/module-version:/{n;p;}' kbase.yml | sed 's/ //g')
        echo ::set-env name=TEST_APP::$(echo ${GITHUB_REPOSITORY}/$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}' | sed -e "s/:refs//")"-testing")
        echo ::set-env name=MY_SHA::$(git rev-parse --short=7 HEAD)


## Set target Docker image based on new pull request label

    - name: Set Appdev Target
      if: contains( github.event.pull_request.labels.*.name, 'appdev')
      run: |
        echo ::set-env name=MY_APP::$(echo ${GITHUB_REPOSITORY}/$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}' | sed -e "s/:refs//")"-appdev")
        echo "Set Appdev"


## Determine if image already build for the various environments
    - name: Check for existing images
      run: |
        echo ::set-env name=ISDEV::$(curl -sL -X POST https://api.github.com/graphql -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }} " -d '{"query":"query{repository(owner:\"jsfillman\",name:\"sdk_ci_demopy\"){registryPackages(first:10,registryPackageType:\"DOCKER\",name: \"sdk_ci_demopy-appdev\"){nodes{versions(first:100){nodes{version}}}}}}"}' | jq . | grep -c $MY_SHA)


## Confirm variables

    - name: Verify Version and Repo Name
      run: |
        echo "Version:" $APP_VERSION_NUM
        echo "App:" $MY_APP
        echo "Repo:" $GITHUB_REPOSITORY
        echo "SHA:" $MY_SHA
        echo "GH SHA:" ${{ GITHUB_SHA }}
        echo "Image count:" $ISDEV
        echo "docker.pkg.github.com/"$MY_APP:sha-$MY_SHA

## Tag and push to GPR
# Fix breaking URL
        
    - name: Tag Environment
      if: contains( github.event.pull_request.labels.*.name, 'appdev') && env.ISDEV < 1
      run: |
        docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} docker.pkg.github.com
        docker pull docker.pkg.github.com/$TEST_APP:sha-$MY_SHA
        docker tag docker.pkg.github.com/$TEST_APP:sha-$MY_SHA docker.pkg.github.com/$MY_APP:sha-$MY_SHA
        docker tag docker.pkg.github.com/$MY_APP:sha-$MY_SHA docker.pkg.github.com/$MY_APP:latest
        docker push docker.pkg.github.com/$MY_APP:sha-$MY_SHA
        docker push docker.pkg.github.com/$MY_APP:latest

# docker tag docker.pkg.github.com/jsfillman/sdk_ci_demopy/sdk_ci_demopy-testing:sha-$MY_SHA docker.pkg.github.com/jsfillman/sdk_ci_demopy/sdk_ci_demopy-next:sha-$MY_SHA
# # Fix latest export ISDEV=$(curl -s https://github.com/jsfillman/sdk_ci_demopy/packages/271278/versions | grep -c 8d1b591)
# docker.pkg.github.com/jsfillman/sdk_ci_demopy/sdk_ci_demopy-appdev:sha-$MY_SHA

## TODO
## Replace hacky curl check under `Check for existing images` to search for existing versions/tags with proper GraphQL query, once API is finalized.
## Here is a (soon to be deprecated) working query:
## echo ::set-env name=VERSIONS::$(curl -sL -X POST https://api.github.com/graphql -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }} " -d '{"query":"query{repository(owner:\"jsfillman\",name:\"sdk_ci_demopy\"){registryPackages(first:10,registryPackageType:\"DOCKER\",name: \"sdk_ci_demopy-testing\"){nodes{versions(first:100){nodes{version}}}}}}"}' | jq .)
## curl -sL -X POST https://api.github.com/graphql -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }} " -d '{"query":"query{repository(owner:\"jsfillman\",name:\"sdk_ci_demopy\"){registryPackages(first:10,registryPackageType:\"DOCKER\",name: \"sdk_ci_demopy-appdev\"){nodes{name,versions(first:100){nodes{version}}}}}}"}' | jq . | grep -c $MY_SHA
## Old way: echo ::set-env name=ISDEV=$(curl -s https://github.com/jsfillman/sdk_ci_demopy/packages/271340/versions | grep -c $MY_SHA)
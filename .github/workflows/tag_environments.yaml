name: Tag Environments

on:
  pull_request:
    types: [ labeled ]

jobs:

  tag_env:
    runs-on: ubuntu-latest
    steps:

    - name: Check out GitHub Repo
      uses: actions/checkout@v2


    - name: Set App Version and Repo Name
      run: |
        echo ::set-env name=APP_VERSION_NUM::$(sed -n '/module-version:/{n;p;}' kbase.yml | sed 's/ //g')
        echo ::set-env name=TEST_APP::$(echo ${GITHUB_REPOSITORY}/$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}' | sed -e "s/:refs//")"-testing")
        echo ::set-env name=MY_SHA::$(git rev-parse --short=7 HEAD)

## Determine if image already build for the various environments
    - name: Check for existing images
      run: |
        echo ::set-env name=ISDEV::$(curl -sL -X POST https://api.github.com/graphql -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }} " -d '{"query":"query{repository(owner:\"jsfillman\",name:\"sdk_ci_demopy\"){registryPackages(first:100,registryPackageType:\"DOCKER\",name: \"sdk_ci_demopy-appdev\"){nodes{versions(first:100){nodes{version}}}}}}"}' | jq . | grep -c $MY_SHA)
        echo ::set-env name=ISNEXT::$(curl -sL -X POST https://api.github.com/graphql -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }} " -d '{"query":"query{repository(owner:\"jsfillman\",name:\"sdk_ci_demopy\"){registryPackages(first:100,registryPackageType:\"DOCKER\",name: \"sdk_ci_demopy-next\"){nodes{versions(first:100){nodes{version}}}}}}"}' | jq . | grep -c $MY_SHA)
        echo ::set-env name=ISCI::$(curl -sL -X POST https://api.github.com/graphql -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }} " -d '{"query":"query{repository(owner:\"jsfillman\",name:\"sdk_ci_demopy\"){registryPackages(first:100,registryPackageType:\"DOCKER\",name: \"sdk_ci_demopy-ci\"){nodes{versions(first:100){nodes{version}}}}}}"}' | jq . | grep -c $MY_SHA)
        echo ::set-env name=ISPROD::$(curl -sL -X POST https://api.github.com/graphql -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }} " -d '{"query":"query{repository(owner:\"jsfillman\",name:\"sdk_ci_demopy\"){registryPackages(first:100,registryPackageType:\"DOCKER\",name: \"sdk_ci_demopy\"){nodes{versions(first:100){nodes{version}}}}}}"}' | jq . | grep -c $MY_SHA)

## Confirm variables
    - name: Verify Version and Repo Name
      run: |
        echo "Version:" $APP_VERSION_NUM
        echo "App:" $MY_APP
        echo "Repo:" $GITHUB_REPOSITORY
        echo "SHA:" $MY_SHA
        echo "Image count dev:" $ISDEV
        echo "Image count next:" $ISNEXT
        echo "Image count CI:" $ISCI
        echo "Image count prod:" $ISPROD
        echo "docker.pkg.github.com/"$MY_APP:sha-$MY_SHA



## Set target Docker image based on new pull request label

    - name: Tag Appdev
      if: contains( github.event.pull_request.labels.*.name, 'appdev') && env.ISDEV < 1
      run: |
        echo ::set-env name=MY_DEV_APP::$(echo ${GITHUB_REPOSITORY}/$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}' | sed -e "s/:refs//")"-appdev")
        echo "Set Appdev"
        echo "App:" $MY_DEV_APP
        docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} docker.pkg.github.com
        docker pull docker.pkg.github.com/$TEST_APP:sha-$MY_SHA
        docker tag docker.pkg.github.com/$TEST_APP:sha-$MY_SHA docker.pkg.github.com/$MY_DEV_APP:sha-$MY_SHA
        docker tag docker.pkg.github.com/$MY_DEV_APP:sha-$MY_SHA docker.pkg.github.com/$MY_DEV_APP:latest
        docker push docker.pkg.github.com/$MY_DEV_APP:sha-$MY_SHA
        docker push docker.pkg.github.com/$MY_DEV_APP:latest


    - name: Tag Next
      if: contains( github.event.pull_request.labels.*.name, 'next') && env.ISNEXT < 1
      run: |
        echo ::set-env name=MY_NEXT_APP::$(echo ${GITHUB_REPOSITORY}/$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}' | sed -e "s/:refs//")"-next")
        echo "Set Next"
        docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} docker.pkg.github.com
        docker pull docker.pkg.github.com/$TEST_APP:sha-$MY_SHA
        docker tag docker.pkg.github.com/$TEST_APP:sha-$MY_SHA docker.pkg.github.com/$MY_NEXT_APP:sha-$MY_SHA
        docker tag docker.pkg.github.com/$MY_NEXT_APP:sha-$MY_SHA docker.pkg.github.com/$MY_NEXT_APP:latest
        docker push docker.pkg.github.com/$MY_NEXT_APP:sha-$MY_SHA
        docker push docker.pkg.github.com/$MY_NEXT_APP:latest

    - name: Tag CI
      if: contains( github.event.pull_request.labels.*.name, 'ci') && env.ISCI < 1
      run: |
        echo ::set-env name=MY_CI_APP::$(echo ${GITHUB_REPOSITORY}/$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}' | sed -e "s/:refs//")"-ci")
        echo "Set CI"
        docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} docker.pkg.github.com
        docker pull docker.pkg.github.com/$TEST_APP:sha-$MY_SHA
        docker tag docker.pkg.github.com/$TEST_APP:sha-$MY_SHA docker.pkg.github.com/$MY_CI_APP:sha-$MY_SHA
        docker tag docker.pkg.github.com/$MY_CI_APP:sha-$MY_SHA docker.pkg.github.com/$MY_CI_APP:latest
        docker push docker.pkg.github.com/$MY_CI_APP:sha-$MY_SHA
        docker push docker.pkg.github.com/$MY_CI_APP:latest


    - name: Tag Prod
      if: contains( github.event.pull_request.labels.*.name, 'prod') && env.ISPROD < 1
      run: |
        echo ::set-env name=MY_PROD_APP::$(echo ${GITHUB_REPOSITORY}/$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}' | sed -e "s/:refs//"))
        echo "Set Next"
        docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} docker.pkg.github.com
        docker pull docker.pkg.github.com/$TEST_APP:sha-$MY_SHA
        docker tag docker.pkg.github.com/$TEST_APP:sha-$MY_SHA docker.pkg.github.com/$MY_PROD_APP:sha-$MY_SHA
        docker tag docker.pkg.github.com/$MY_PROD_APP:sha-$MY_SHA docker.pkg.github.com/$MY_PROD_APP:latest
        docker push docker.pkg.github.com/$MY_PROD_APP:sha-$MY_SHA
        docker push docker.pkg.github.com/$MY_PROD_APP:latest